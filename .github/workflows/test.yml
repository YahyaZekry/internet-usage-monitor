name: üß™ Test Internet Usage Monitor

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test-installation:
    name: Test Installation on ${{ matrix.os }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os:
          [
            "ubuntu:22.04",
            "ubuntu:20.04",
            "debian:11",
            "fedora:38",
            "archlinux:latest",
          ]

    container:
      image: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install base dependencies (Ubuntu/Debian)
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'debian')
        run: |
          apt-get update
          apt-get install -y sudo git bash curl

      - name: Install base dependencies (Fedora)
        if: contains(matrix.os, 'fedora')
        run: |
          dnf install -y sudo git bash curl

      - name: Install base dependencies (Arch)
        if: contains(matrix.os, 'archlinux')
        run: |
          pacman -Sy --noconfirm sudo git bash curl

      - name: Create test user
        run: |
          useradd -m -s /bin/bash testuser
          echo "testuser ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/testuser

      - name: Test package installation (Ubuntu/Debian)
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'debian')
        run: |
          sudo -u testuser bash -c 'cd /home/testuser && sudo apt-get install -y conky bc procps libnotify-bin zenity'

      - name: Test package installation (Fedora)
        if: contains(matrix.os, 'fedora')
        run: |
          sudo -u testuser bash -c 'cd /home/testuser && sudo dnf install -y conky bc procps-ng libnotify zenity'

      - name: Test package installation (Arch)
        if: contains(matrix.os, 'archlinux')
        run: |
          sudo -u testuser bash -c 'cd /home/testuser && sudo pacman -S --noconfirm conky bc procps-ng libnotify zenity'

      - name: Copy project files
        run: |
          cp -r $GITHUB_WORKSPACE /home/testuser/internet-usage-monitor
          chown -R testuser:testuser /home/testuser/internet-usage-monitor

      - name: Test manual installation
        run: |
          sudo -u testuser bash -c 'cd /home/testuser/internet-usage-monitor && 
            chmod +x src/*.sh scripts/*.sh install.sh uninstall.sh && 
            cp config/conkyrc_internet ~/.conkyrc_internet && 
            cp src/internet_monitor.sh ~/ && 
            cp src/conky_usage_helper.sh ~/ &&
            cp config/config.sh ~/'

      - name: Test monitor script syntax
        run: |
          sudo -u testuser bash -c 'cd /home/testuser && bash -n internet_monitor.sh'

      - name: Test helper script syntax
        run: |
          sudo -u testuser bash -c 'cd /home/testuser && bash -n conky_usage_helper.sh'

      - name: Test script execution (dry run)
        run: |
          sudo -u testuser bash -c 'cd /home/testuser && 
            export DEBUG=true && 
            timeout 10s bash internet_monitor.sh || true'

  code-quality:
    name: üîç Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install ShellCheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Run ShellCheck on shell scripts
        run: |
          find . -name "*.sh" -exec shellcheck {} \;

      - name: Check file permissions
        run: |
          echo "Checking executable permissions..."
          test -x install.sh || echo "‚ùå install.sh should be executable"
          echo "‚úÖ Permission checks completed"

      - name: Validate required files
        run: |
          echo "Checking required files exist..."
          test -f README.md || (echo "‚ùå README.md missing" && exit 1)
          test -f LICENSE || (echo "‚ùå LICENSE missing" && exit 1)
          test -f install.sh || (echo "‚ùå install.sh missing" && exit 1)
          test -f .gitignore || (echo "‚ùå .gitignore missing" && exit 1)
          echo "‚úÖ All required files present"

      - name: Lint Markdown files
        uses: DavidAnson/markdownlint-cli2-action@v15
        with:
          globs: |
            README.md
            docs/**/*.md
          config: .markdownlint-cli2.jsonc

  test-conky-config:
    name: üé® Test Conky Configuration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Conky
        run: |
          sudo apt-get update
          sudo apt-get install -y conky

      - name: Test Conky config syntax
        run: |
          # Test if conky can parse the config without errors
          conky -c config/conkyrc_internet -t 1 -d || echo "‚ö†Ô∏è Conky config may have issues"

      - name: Validate Conky config structure
        run: |
          echo "Checking Conky configuration structure..."
          grep -q "conky.config" config/conkyrc_internet || (echo "‚ùå Missing conky.config section" && exit 1)
          grep -q "conky.text" config/conkyrc_internet || (echo "‚ùå Missing conky.text section" && exit 1)
          echo "‚úÖ Conky configuration structure valid"

  documentation-check:
    name: üìö Documentation Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check README completeness
        run: |
          echo "Checking README completeness..."
          grep -q "Prerequisites" README.md || (echo "‚ùå Missing Prerequisites section" && exit 1)
          grep -q "Installation" README.md || (echo "‚ùå Missing Installation section" && exit 1)
          grep -q "Usage" README.md || (echo "‚ùå Missing Usage section" && exit 1)
          grep -q "Troubleshooting" README.md || (echo "‚ùå Missing Troubleshooting section" && exit 1)
          grep -q "License" README.md || (echo "‚ùå Missing License section" && exit 1)
          echo "‚úÖ README documentation complete"

      - name: Check GitHub username consistency
        run: |
          echo "Checking GitHub username consistency..."
          grep -q "Yahya-Zekry" README.md || (echo "‚ùå GitHub username not found in README" && exit 1)
          echo "‚úÖ GitHub username consistent"

      - name: Verify yerba mate slogan
        run: |
          echo "Checking for yerba mate charm... üßâ"
          grep -q "yerba mate" README.md || (echo "‚ùå Missing yerba mate reference" && exit 1)
          grep -q "üßâ" README.md || (echo "‚ùå Missing yerba mate emoji" && exit 1)
          echo "‚úÖ Yerba mate charm confirmed! üßâ‚öñÔ∏è"
